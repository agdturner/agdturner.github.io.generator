/*
 * Copyright 2022 Centre for Computational Geography.
 *
 * Licensed under the Apache License, Version 2.0 (the"License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an"AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.github.agdturner.course.python.intro.pages;

import io.github.agdturner.course.python.intro.PythonIntroCourse;
import io.github.agdturner.course.Page;

/**
 * For Python Intro Course Variables Page.
 *
 * @author Andy Turner
 */
public class Exceptions extends Page {
    
    /**
     * Create a new instance.
     *
     * @param c The Course.
     */
    public Exceptions(PythonIntroCourse c) {
        super("exceptions", "Exceptions", "Exceptions", c);
    }
    
    @Override
    public void write() {
        writeHeader();
        writeH1();
        w.add("""
              <h2>1. Introduction</h2>
              <p>When something goes wrong, ideally we don't want our program to 
              fail completely without informing about what went wrong. When the 
              Python interpretter detects a problem, it generates an Exception 
              object which can then be interrogated to try to understand what 
              went wrong.</p>
              <p>In this part of the course we will learn a bit more about 
              exception and error handling and debugging.</p>
              
              <h2>2. Try-Except</h2>
              <p>If it is suspected that code might generate an exception, a 
              try-except compound statement can be used to help do this.</p>
              <p>Consider the following code:</p>
              <pre><code class=\"language-python\"># Catch an excpetion
              import random
              try:
                  a = 1/random.random()
                  # Random generates number in
                  # range 0,1 so
                  # ZeroDivisionError possible
              except:
                  a = 0
              print("Done")</code></pre>
              <p>This will try to do the try part of the compound statement, 
              and only if an exception is thrown will it run the except part. 
              The except part catches any exception type, but it is possible to 
              be more specific and catch particular types of exception, for 
              example, the following will only run the except part if the 
              exception thrown is a ZeroDivisionError:</p>
              including those generated by ending the program normally or with the keyboard.
              <pre><code class=\"language-python\"># Catch a specific exception:
              import random
              try:
                  a = 1/random.random()
                  # Random generates number in
                  # range 0,1 so
                  # ZeroDivisionError possible
              except ZeroDivisionError :
                  a = 0
              print("Done")</code></pre>
              <p>For a list of built in exceptions, see:
              <a href="https://docs.python.org/3/library/exceptions.html#Exception">
              Python Exceptions</a>
              <p>If the exception isn't handled, it cascades to wherever the 
              code that raised the exception was called from. This cascading 
              continues until there is an exception handler or until the 
              exception reaches the top level when the code breaks and a 
              stacktrace error message is printed. The stacktrace lists the 
              places the exception has bounced through.</p>
              
              <h2>3. System Exit Calls</h2>
              <p>To exit the system at any point, call the Exit Function (exit) 
              from the Sys Module (sys). For example:</p>
              <pre><code class=\"language-python\">import sys
              sys.exit()</code></pre>
              <p>This has an arg option:</p>
              <pre><code class=\"language-python\">sys.exit(arg)</code></pre>
              <p>Which is an error number to report to the system. Zero is 
              usually regarded as exiting with no issues.</p>
              <p>For more on this, see: 
              <a href="https://docs.python.org/3/library/sys.html#sys.exit">
              sys.exit</a>.
              See also:
              <a href="https://docs.python.org/3/library/errno.html">errno</a> -
              a special module on system error codes.</p>
              """);
//              <pre></pre>
//              <pre><code class=\"language-python\"></code></pre>
//              <p></p>
//              <pre></pre>
//              
        w.add("</div>");
    }
}
